name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly on Monday at 3 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install safety bandit semgrep pip-audit
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
    
    - name: Upload dependency scan results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-scan-results
        path: |
          safety-report.json
          pip-audit-report.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] semgrep
    
    - name: Run Bandit security scan
      run: |
        bandit -r simplenote_mcp/ -f json -o bandit-report.json || true
        bandit -r simplenote_mcp/ -f txt
    
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json simplenote_mcp/ || true
        semgrep --config=auto simplenote_mcp/
    
    - name: Upload code security results
      uses: actions/upload-artifact@v4
      with:
        name: code-security-results
        path: |
          bandit-report.json
          semgrep-report.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  security-report:
    name: Generate Security Report
    needs: [dependency-scan, code-security-scan, secrets-scan, codeql-analysis]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download scan results
      uses: actions/download-artifact@v4
      with:
        path: security-results
    
    - name: Generate security report
      run: |
        python - <<'EOF'
        import json
        import os
        from datetime import datetime
        
        def load_json_report(filepath):
            try:
                with open(filepath, 'r') as f:
                    return json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                return None
        
        # Load all security reports
        safety_report = load_json_report('security-results/dependency-scan-results/safety-report.json')
        pip_audit_report = load_json_report('security-results/dependency-scan-results/pip-audit-report.json')
        bandit_report = load_json_report('security-results/code-security-results/bandit-report.json')
        semgrep_report = load_json_report('security-results/code-security-results/semgrep-report.json')
        
        # Generate comprehensive report
        report = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_vulnerabilities': 0,
                'critical': 0,
                'high': 0,
                'medium': 0,
                'low': 0
            },
            'dependency_vulnerabilities': [],
            'code_issues': [],
            'recommendations': []
        }
        
        # Process Safety report
        if safety_report and 'vulnerabilities' in safety_report:
            for vuln in safety_report['vulnerabilities']:
                severity = vuln.get('severity', 'unknown').lower()
                report['dependency_vulnerabilities'].append({
                    'package': vuln.get('package_name', 'unknown'),
                    'vulnerability': vuln.get('vulnerability_id', 'unknown'),
                    'severity': severity,
                    'description': vuln.get('advisory', 'No description available')
                })
                report['summary']['total_vulnerabilities'] += 1
                if severity in report['summary']:
                    report['summary'][severity] += 1
        
        # Process pip-audit report
        if pip_audit_report and 'vulnerabilities' in pip_audit_report:
            for vuln in pip_audit_report['vulnerabilities']:
                severity = 'medium'  # pip-audit doesn't always provide severity
                report['dependency_vulnerabilities'].append({
                    'package': vuln.get('package', 'unknown'),
                    'vulnerability': vuln.get('id', 'unknown'),
                    'severity': severity,
                    'description': vuln.get('description', 'No description available')
                })
                report['summary']['total_vulnerabilities'] += 1
                report['summary'][severity] += 1
        
        # Process Bandit report
        if bandit_report and 'results' in bandit_report:
            for issue in bandit_report['results']:
                severity = issue.get('issue_severity', 'medium').lower()
                report['code_issues'].append({
                    'file': issue.get('filename', 'unknown'),
                    'line': issue.get('line_number', 0),
                    'test': issue.get('test_name', 'unknown'),
                    'severity': severity,
                    'description': issue.get('issue_text', 'No description available')
                })
                report['summary']['total_vulnerabilities'] += 1
                if severity in report['summary']:
                    report['summary'][severity] += 1
        
        # Generate recommendations
        if report['summary']['total_vulnerabilities'] > 0:
            if report['dependency_vulnerabilities']:
                report['recommendations'].append("Update vulnerable dependencies to latest secure versions")
            if report['code_issues']:
                report['recommendations'].append("Review and fix code security issues identified by static analysis")
            if report['summary']['critical'] > 0 or report['summary']['high'] > 0:
                report['recommendations'].append("Prioritize fixing critical and high severity vulnerabilities")
        else:
            report['recommendations'].append("No security vulnerabilities detected. Continue regular security monitoring.")
        
        # Save comprehensive report
        with open('security-report.json', 'w') as f:
            json.dump(report, f, indent=2)
        
        # Generate markdown report
        with open('security-report.md', 'w') as f:
            f.write(f"# Security Scan Report\n\n")
            f.write(f"**Generated:** {report['timestamp']}\n\n")
            f.write(f"## Summary\n\n")
            f.write(f"- **Total Vulnerabilities:** {report['summary']['total_vulnerabilities']}\n")
            f.write(f"- **Critical:** {report['summary']['critical']}\n")
            f.write(f"- **High:** {report['summary']['high']}\n")
            f.write(f"- **Medium:** {report['summary']['medium']}\n")
            f.write(f"- **Low:** {report['summary']['low']}\n\n")
            
            if report['dependency_vulnerabilities']:
                f.write(f"## Dependency Vulnerabilities\n\n")
                for vuln in report['dependency_vulnerabilities']:
                    f.write(f"- **{vuln['package']}** ({vuln['severity']}): {vuln['vulnerability']}\n")
                    f.write(f"  {vuln['description']}\n\n")
            
            if report['code_issues']:
                f.write(f"## Code Security Issues\n\n")
                for issue in report['code_issues']:
                    f.write(f"- **{issue['file']}:{issue['line']}** ({issue['severity']}): {issue['test']}\n")
                    f.write(f"  {issue['description']}\n\n")
            
            f.write(f"## Recommendations\n\n")
            for rec in report['recommendations']:
                f.write(f"- {rec}\n")
        
        # Print summary
        print(f"Security scan completed:")
        print(f"Total vulnerabilities: {report['summary']['total_vulnerabilities']}")
        print(f"Critical: {report['summary']['critical']}")
        print(f"High: {report['summary']['high']}")
        print(f"Medium: {report['summary']['medium']}")
        print(f"Low: {report['summary']['low']}")
        
        # Set exit code if critical or high vulnerabilities found
        if report['summary']['critical'] > 0 or report['summary']['high'] > 0:
            print("❌ Critical or high severity vulnerabilities found!")
            exit(1)
        elif report['summary']['total_vulnerabilities'] > 0:
            print("⚠️ Medium or low severity vulnerabilities found")
        else:
            print("✅ No security vulnerabilities detected")
        EOF
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: |
          security-report.json
          security-report.md
    
    - name: Comment on PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });
          } catch (error) {
            console.log('Could not read security report:', error.message);
          }