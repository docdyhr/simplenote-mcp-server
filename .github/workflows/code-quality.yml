name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 5 * * 1'  # Run every Monday at 5 AM UTC for trend analysis

jobs:
  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for trend analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pre-commit ruff mypy pytest pytest-asyncio pytest-cov pytest-mock
        
    - name: ✅ Verify Installation
      run: |
        echo "📦 Testing package import..."
        python -c "import simplenote_mcp; print('✅ Package import successful')"
        echo "🔧 Checking tools..."
        ruff --version
        mypy --version
        pre-commit --version
      continue-on-error: false
        
    - name: Run pre-commit
      run: |
        echo "🔧 Running pre-commit hooks..."
        pre-commit run --all-files --show-diff-on-failure | tee pre-commit-output.txt || echo "⚠️ Pre-commit issues found but continuing"
      continue-on-error: true
        
    - name: Calculate issues
      id: pre-commit-issues
      run: |
        format_issues=$(grep -E "ruff-format.*Failed" pre-commit-output.txt | wc -l || echo 0)
        lint_issues=$(grep -E "ruff.*Failed" pre-commit-output.txt | wc -l || echo 0)
        let lint_issues=$lint_issues-$format_issues || true
        echo "format_issues=$format_issues" >> $GITHUB_OUTPUT
        echo "lint_issues=$lint_issues" >> $GITHUB_OUTPUT
    
    - name: Generate linting report
      run: |
        echo "# Linting Report" > linting-report.md
        echo "## Ruff Format Issues: ${{ steps.pre-commit-issues.outputs.format_issues }}" >> linting-report.md
        echo "## Ruff Lint Issues: ${{ steps.pre-commit-issues.outputs.lint_issues }}" >> linting-report.md
        echo "Total issues: $((${{ steps.pre-commit-issues.outputs.format_issues }} + ${{ steps.pre-commit-issues.outputs.lint_issues }}))" >> linting-report.md
    
    - name: Upload linting report
      uses: actions/upload-artifact@v4
      with:
        name: linting-report
        path: linting-report.md

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: [pre-commit]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install ruff
        
    - name: ✅ Verify Installation
      run: |
        echo "📦 Testing package import..."
        python -c "import simplenote_mcp; print('✅ Package import successful')"
        echo "🔧 Checking ruff..."
        ruff --version
      continue-on-error: false
        
    - name: Run security check with Ruff
      run: |
        echo "🔒 Running security checks with Ruff..."
        # Run Ruff with only security rules and output to JSON
        python -m ruff check --select=S --output-format=json simplenote_mcp > security-results.json || echo "⚠️ Security issues found"
        # Display human-readable results
        python -m ruff check --select=S simplenote_mcp || echo "⚠️ Security issues found but continuing"
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-results.json

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: [pre-commit]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install mypy
    
    - name: ✅ Verify Installation
      run: |
        echo "📦 Testing package import..."
        python -c "import simplenote_mcp; print('✅ Package import successful')"
        echo "🔧 Checking mypy..."
        mypy --version
      continue-on-error: false
    
    - name: Run mypy type checking
      run: |
        echo "🔍 Running mypy type checking..."
        rm -rf .mypy_cache || true
        mypy simplenote_mcp --config-file=mypy.ini --html-report mypy-report || echo "⚠️ Type checking issues found but continuing"
      continue-on-error: true
    
    - name: Upload type checking report
      uses: actions/upload-artifact@v4
      with:
        name: mypy-report
        path: mypy-report

  code-quality-report:
    name: Code Quality Report
    needs: [pre-commit, security, type-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Download linting report
      uses: actions/download-artifact@v4
      with:
        name: linting-report
      continue-on-error: true
    
    - name: Generate simple quality report
      run: |
        echo "# Code Quality Report" > quality-report.md
        echo "Generated on: $(date)" >> quality-report.md
        echo "## Summary" >> quality-report.md
        echo "- Pre-commit checks completed" >> quality-report.md
        echo "- Security scan completed" >> quality-report.md
        echo "- Type checking completed" >> quality-report.md
        echo "Note: Some checks may have found issues but did not block the pipeline" >> quality-report.md
      continue-on-error: true
    
    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md
      continue-on-error: true