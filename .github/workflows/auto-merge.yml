name: Auto-Merge PRs

on:
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
      checks: read
    
    steps:
      - name: Check if PR is ready for merge
        id: check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            // Skip if PR is already merged or is a draft
            if (!pr || pr.merged || pr.draft) {
              console.log('PR is not eligible for auto-merge');
              return false;
            }
            
            // Get PR details
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // Check if PR has auto-merge label
            const hasAutoMergeLabel = pullRequest.labels.some(
              label => label.name === 'auto-merge'
            );
            
            // Check target branch (only auto-merge to develop or main)
            const validTargetBranches = ['develop', 'main'];
            const isValidTarget = validTargetBranches.includes(pullRequest.base.ref);
            
            // Get reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // Check for approved reviews
            const approvedReviews = reviews.filter(
              review => review.state === 'APPROVED'
            );
            const hasApproval = approvedReviews.length > 0;
            
            // Get check runs
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pullRequest.head.sha
            });
            
            // Check if all required checks passed
            const requiredChecks = ['test', 'lint', 'build'];
            const allChecksPassed = requiredChecks.every(checkName => {
              const check = checkRuns.check_runs.find(
                run => run.name.toLowerCase().includes(checkName)
              );
              return check && check.conclusion === 'success';
            });
            
            const canMerge = hasAutoMergeLabel && isValidTarget && hasApproval && allChecksPassed;
            
            console.log(`Auto-merge eligibility: ${canMerge}`);
            console.log(`- Has auto-merge label: ${hasAutoMergeLabel}`);
            console.log(`- Valid target branch: ${isValidTarget}`);
            console.log(`- Has approval: ${hasApproval}`);
            console.log(`- All checks passed: ${allChecksPassed}`);
            
            return canMerge;

      - name: Auto merge PR
        if: steps.check.outputs.result == 'true'
        uses: pascalgn/automerge-action@v0.16.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MERGE_METHOD: squash
          MERGE_COMMIT_MESSAGE: pull-request-title
          UPDATE_LABELS: ""
          MERGE_LABELS: "auto-merge"
          MERGE_REMOVE_LABELS: "auto-merge"
          MERGE_RETRIES: 3
          MERGE_RETRY_SLEEP: 10000
          MERGE_DELETE_BRANCH: true

  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    permissions:
      pull-requests: write
      contents: write
    
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Auto-approve Dependabot PRs
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Auto-merge Dependabot PRs
        if: steps.metadata.outputs.update-type == 'version-update:semver-patch' || steps.metadata.outputs.update-type == 'version-update:semver-minor'
        run: gh pr merge --auto --squash "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}